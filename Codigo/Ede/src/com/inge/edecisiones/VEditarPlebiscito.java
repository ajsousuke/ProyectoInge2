package com.inge.edecisiones;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class VEditarPlebiscito extends Panel implements View {
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Panel menu;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Button BotonRegistrar;
	@AutoGenerated
	private Button BotonVolver;
	@AutoGenerated
	private PopupDateField FechaRes;
	@AutoGenerated
	private PopupDateField FechaVFin;
	@AutoGenerated
	private PopupDateField FechaVoIni;
	@AutoGenerated
	private PopupDateField FechaAIFin;
	@AutoGenerated
	private PopupDateField FechaAIIni;
	@AutoGenerated
	private PopupDateField FechaADFin;
	@AutoGenerated
	private PopupDateField FechaADIni;
	@AutoGenerated
	private TextArea EntradaDescripcion;
	@AutoGenerated
	private OptionGroup OpcionAcceso;
	@AutoGenerated
	private OptionGroup OpcionTipo;
	@AutoGenerated
	private Label EtiquetaInfo;
	@AutoGenerated
	private TextField EntradaNombre;
	/**	 */
	private static final long serialVersionUID = 1L;
	
	
	/**- Atributos especificos -*/
	EditarPlebiscito controlador;
	InfoPlebiscito infoPlebiscito;	
	
	Window VentanaExito;
	Button BotonExito;
	
	Window VentanaConfirmar;
	Button BotonConfirmarOk;
	Button BotonConfirmarVolver;
	
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public VEditarPlebiscito(EditarPlebiscito con) {		
		controlador = con;		
		
		buildMainLayout();

		// TODO add user code here
		
		OpcionTipo.addItem("Plebiscito");
		OpcionTipo.addItem("Eleccion");
		
		OpcionAcceso.addItem("Publico");
		OpcionAcceso.addItem("Privado");
		
		initBotones();
		initVentanas();
	}
	
	public void setInfoPlebiscito(InfoPlebiscito ip) {
		infoPlebiscito = ip;
	}
	
	/**
	 * Dejar vacios los campos de la venta
	 */
	public void limpiar() {
		EntradaNombre.setValue("");
		EntradaDescripcion.setValue("");
		FechaADIni.setValue(null);
		FechaADFin.setValue(null);
		FechaAIIni.setValue(null); 
		FechaAIFin.setValue(null); 
		FechaVoIni.setValue(null);
		FechaVFin.setValue(null);
		FechaRes.setValue(null);
	}
	/**
	 * Llena los campos con los valores del
	 * plebliscito seleccionado
	 */
	public void llenar() {
		EntradaNombre.setValue(infoPlebiscito.GetNombre());
		EntradaDescripcion.setValue(infoPlebiscito.GetDescripcion());
		
		OpcionAcceso.select(infoPlebiscito.GetAcceso()? "Publico":"Privado");
		OpcionTipo.select(infoPlebiscito.GetTipo()? "Plebiscito":"Eleccion");
		
		FechaADIni.setValue(infoPlebiscito.GetPeriodoDiscusion()[0]);
		FechaADFin.setValue(infoPlebiscito.GetPeriodoDiscusion()[1]);
		
		FechaAIIni.setValue(infoPlebiscito.GetPeriodoInscripcion()[0]); 
		FechaAIFin.setValue(infoPlebiscito.GetPeriodoInscripcion()[1]);
		
		FechaVoIni.setValue(infoPlebiscito.GetPeriodoVotacion()[0]);
		FechaVFin.setValue(infoPlebiscito.GetPeriodoVotacion()[1]);
		FechaRes.setValue(infoPlebiscito.GetPublicacionResultados());
	}
	
	/**
	 * inicializar las ventanas emergentes
	 */
	private void initVentanas() {
		// ventana de confirmacion
		VentanaConfirmar = new Window("Confirmar Registro");	
			
		BotonConfirmarOk = new Button("Confirmar");		
		BotonConfirmarOk.addClickListener(new Button.ClickListener() {	
			
			@Override
			public void buttonClick(ClickEvent event) {
				// guarda y pone la ventana de exito
				controlador.getEdecisiones().removeWindow(VentanaConfirmar);
				controlador.guardar();
				controlador.getEdecisiones().addWindow(VentanaExito);				
			}
		});	
		
		BotonConfirmarVolver = new Button("Volver");
		BotonConfirmarVolver.addClickListener(new Button.ClickListener() {	
			
			@Override
			public void buttonClick(ClickEvent event) {
				// solo quita la ventana de confirmacion
				controlador.getEdecisiones().removeWindow(VentanaConfirmar);
			}
		});	
		
		VerticalLayout contenido = new VerticalLayout();
		contenido.addComponent(new Label("El plebiscito será registrado. Si se modificó uno existente se guardaran los cambios."));
		contenido.addComponent(BotonConfirmarOk);
		contenido.addComponent(BotonConfirmarVolver);
		contenido.setSizeUndefined();
			
		VentanaConfirmar.setContent(contenido);
		VentanaConfirmar.setSizeUndefined();
		
		// ventana de exito
		VentanaExito = new Window("Registro Guardado");
				
		BotonExito = new Button("Exito");
		BotonExito.addClickListener(new Button.ClickListener() {	
			
			@Override
			public void buttonClick(ClickEvent event) {
				// quita la ventana de exito y vuelve a entrar a CUS editar plebiscito
				controlador.getEdecisiones().removeWindow(VentanaExito);
				controlador.ir_a_inicio();
			}
		});	
			
		contenido = new VerticalLayout();
		contenido.addComponent(new Label("Los datos se han guardado con éxito"));
		contenido.addComponent(BotonExito);
		
		VentanaExito.setContent(contenido);
		VentanaExito.setSizeUndefined();
	}
	
	/**
	 * Establece los listeners para los botones
	 */
	private void initBotones() {
		// boton de registrar
		BotonRegistrar.addClickListener( new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub

				// chequeos sencillos en la interfaz 				
				if( tieneCamposVacios() ) {
					Notification.show("ERROR: hay campos vacios");
					return;
				}
				if( fechasIncorrectas() ) {
					Notification.show("ERROR: alguna de las fechas tienen orden incorrecto");
					return;
				} 
				
				// Controlador revisa si los datos son validos
				leerDatos();
				if ( !controlador.datosValidos() ) {
					return;
				}				
				controlador.getEdecisiones().addWindow(VentanaConfirmar);				
			}
		} );
		
		// boton de volver
		BotonVolver.addClickListener(new Button.ClickListener() {	
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				controlador.ir_a_inicio();
			}
		});
		
	}
	
	/**
	 * Lee los datos en los campos en la ventana
	 * y llena los campos de InfoPlebiscito con sus valores.
	 */	
	private void leerDatos() {
		
		infoPlebiscito.SetNombre(EntradaNombre.getValue());
		infoPlebiscito.SetDescripcion(EntradaDescripcion.getValue());
		
		if(OpcionAcceso.getValue().toString().equals("Publico")) {
			infoPlebiscito.SetAcceso(true);
		}
		else{
			infoPlebiscito.SetAcceso(false);
		}
		if(OpcionTipo.getValue().toString().equals("Plebiscito")) {
			infoPlebiscito.SetTipo(true);	
		}		
		else {
			infoPlebiscito.SetTipo(false);
		}
		
		infoPlebiscito.SetPeriodoDiscusion(FechaADIni.getValue(), FechaADFin.getValue());
		infoPlebiscito.SetPeriodoInscripcion(FechaAIIni.getValue(), FechaAIFin.getValue());
		infoPlebiscito.SetPeriodoVotacion(FechaVoIni.getValue(), FechaVFin.getValue());
		infoPlebiscito.SetPublicacionResultados(FechaRes.getValue());
		
	}
			
	/**
	 * Devuelve true si hay un campo sin llenar
	 */
	private boolean tieneCamposVacios() {
		boolean a = false;
		
		a = EntradaNombre.getValue().isEmpty();
		a = (EntradaDescripcion.getValue().isEmpty() || a);
		a = (FechaADIni.getValue() == null || a);
		a = (FechaADFin.getValue() == null || a);
		a = (FechaAIIni.getValue() == null || a); 
		a = (FechaAIFin.getValue() == null || a); 
		a = (FechaVoIni.getValue() == null || a);
		a = (FechaVFin.getValue()  == null || a);
		a = (FechaRes.getValue()   == null || a);
		
		return a;
	}
	
	/**
	 * Devuelve true si las fechas ingresadas son invalidas
	 */
	private boolean fechasIncorrectas() {
		boolean f = false;
		// hacer f = true si hay algun error
		
		// verificar si apertura esta mismo dia o despues de cierre => error
		f = !FechaADIni.getValue().before(FechaADFin.getValue());
		f = !FechaAIIni.getValue().before(FechaAIFin.getValue()) || f; 
		f = !FechaVoIni.getValue().before(FechaVFin.getValue())  || f;
		
		// verificar si orden entre peridos es correcto.
		f = !FechaADFin.getValue().before(FechaAIIni.getValue()) || f;
		f = !FechaAIFin.getValue().before(FechaVoIni.getValue()) || f;
		f = !FechaVoIni.getValue().before(FechaRes.getValue())   || f;
		
		return f;
	}
	
	/**
	 * Se ejecuta cuando el navegador cambia a este view
	 */
	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setCaption("Edecisiones - Registrar Plebiscito");
		mainLayout.setImmediate(false);
		
		// menu
		menu = new Panel();
		menu.setContent(new Menu(controlador.getEdecisiones()));
		mainLayout.addComponent(menu);
		
		
		// EntradaNombre
		EntradaNombre = new TextField();
		EntradaNombre.setCaption("Nombre de la propuesta");
		EntradaNombre.setImmediate(false);
		mainLayout.addComponent(EntradaNombre);
		
		// EtiquetaInfo
		EtiquetaInfo = new Label();
		EtiquetaInfo.setImmediate(false);
		EtiquetaInfo.setValue("Ingrese los datos del plebiscito");
		mainLayout.addComponent(EtiquetaInfo);
		
		// OpcionTipo
		OpcionTipo = new OptionGroup();
		OpcionTipo.setCaption("Seleccione el tipo de consulta");
		OpcionTipo.setImmediate(false);
		mainLayout.addComponent(OpcionTipo);
		
		// OpcionAcceso
		OpcionAcceso = new OptionGroup();
		OpcionAcceso
				.setCaption("Elija el tipo de acceso a la discucion y datos del plebiscito");
		OpcionAcceso.setImmediate(false);
		mainLayout.addComponent(OpcionAcceso);
		
		// EntradaDescripcion
		EntradaDescripcion = new TextArea();
		EntradaDescripcion.setCaption("Descripcion de la propuesta");
		EntradaDescripcion.setImmediate(false);
		EntradaDescripcion.setSizeFull();
		mainLayout.addComponent(EntradaDescripcion);
		
		// FechaADIni
		FechaADIni = new PopupDateField();
		FechaADIni.setCaption("Apertura de Discucion");
		FechaADIni.setImmediate(false);
		mainLayout.addComponent(FechaADIni);
		
		// FechaADFin
		FechaADFin = new PopupDateField();
		FechaADFin.setCaption("Cierre de discucion");
		FechaADFin.setImmediate(false);
		mainLayout.addComponent(FechaADFin);
		
		// FechaAIIni
		FechaAIIni = new PopupDateField();
		FechaAIIni.setCaption("Apertura de inscripcion de tendencias");
		FechaAIIni.setImmediate(false);
		mainLayout.addComponent(FechaAIIni);
		
		// FechaAIFin
		FechaAIFin = new PopupDateField();
		FechaAIFin.setCaption("Cierre de inscripcion de tendencias");
		FechaAIFin.setImmediate(false);
		mainLayout.addComponent(FechaAIFin);
		
		// FechaVoIni
		FechaVoIni = new PopupDateField();
		FechaVoIni.setCaption("Apertura de votacion");
		FechaVoIni.setImmediate(false);
		mainLayout.addComponent(FechaVoIni);
		
		// FechaVFin
		FechaVFin = new PopupDateField();
		FechaVFin.setCaption("Cierre de votacion");
		FechaVFin.setImmediate(false);
		mainLayout.addComponent(FechaVFin);
		
		// FechaRes
		FechaRes = new PopupDateField();
		FechaRes.setCaption("Publicacion de Resultados");
		FechaRes.setImmediate(false);
		mainLayout.addComponent(FechaRes);
		
		// BotonVolver
		BotonVolver = new Button();
		BotonVolver.setCaption("Volver");
		BotonVolver.setImmediate(true);
		mainLayout.addComponent(BotonVolver);
		
		// BotonRegistrar
		BotonRegistrar = new Button();
		BotonRegistrar.setCaption("Registrar");
		BotonRegistrar.setImmediate(true);
		mainLayout.addComponent(BotonRegistrar);		
		
		this.setContent(mainLayout);
		return mainLayout;
	}	
}
