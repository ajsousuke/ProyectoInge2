package com.inge.edecisiones;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;

public class VNuevaTendencia extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button BotonEliminar;
	@AutoGenerated
	private Button BotonEditar;
	@AutoGenerated
	private ComboBox SeleccionTendencia;
	@AutoGenerated
	private Label EtiquetaCrearNueva;
	@AutoGenerated
	private Button BotonNueva;
	@AutoGenerated
	private Panel Menu;
	@AutoGenerated
	private HorizontalLayout MenuContenido;
	@AutoGenerated
	private ComboBox SeleccionPlebiscito;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	/**- Atributos especificos -*/
	EditarTendencia controlador;
	
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public VNuevaTendencia(EditarTendencia e) {
		controlador = e;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		//Menu.setContent(controlador.getMenu());
		Menu.setContent(  new Menu(controlador.getEdecisiones())  );
		Menu.setSizeUndefined();
		
		initBotones();
	}
	
	private void initBotones() {
		// boton nueva tendencia		
		BotonNueva.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				String nomp = SeleccionPlebiscito.getValue().toString();
				controlador.crearNuevo(nomp);
			}
		});	
		
		// boton editar
		BotonEditar.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				String nombrePlebiscito = SeleccionPlebiscito.getValue().toString();
				String nombreTendencia = SeleccionTendencia.getValue().toString();
				controlador.editarExistente(nombrePlebiscito, nombreTendencia);
			}
		});
		
		// boton eliminar
		BotonEliminar.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				if(SeleccionTendencia.isEnabled()) {
					String nombrePlebiscito = SeleccionPlebiscito.getValue().toString();
					String nombreTendencia = SeleccionTendencia.getValue().toString();
					controlador.eliminar(nombrePlebiscito, nombreTendencia);	
				}
			}
		});
		
		// lista plebiscitos
		SeleccionPlebiscito.setImmediate(true);
		SeleccionPlebiscito.addValueChangeListener(new ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				// si no hay seleccionado un plebiscito,
				// no debe habilitarse la lista de tendencias
				// ni el boton para crear una nueva
				if( SeleccionPlebiscito.getValue() == null ){
					SeleccionTendencia.setEnabled(false);
					BotonNueva.setEnabled(false);
				}
				else {
					if( SeleccionPlebiscito.getValue().toString().isEmpty() ) {
						SeleccionTendencia.setEnabled(false);
						BotonNueva.setEnabled(false);
					}
					else {
						initListaTendencias();
						SeleccionTendencia.setEnabled(true);
						BotonNueva.setEnabled(true);
					}
				}
			}
		});
		
		// lista tendencias
		SeleccionTendencia.setImmediate(true);
		SeleccionTendencia.addValueChangeListener(new ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				// habilitar o deshabilitar los botones
				if( SeleccionTendencia.getValue() == null) {
					BotonEditar.setEnabled(false);
					BotonEliminar.setEnabled(false);
				}
				else {
					if( SeleccionTendencia.getValue().toString().isEmpty() ){
						BotonEditar.setEnabled(false);
						BotonEliminar.setEnabled(false);
					}
					else {
						BotonEditar.setEnabled(true);
						BotonEliminar.setEnabled(true);
					}
				}
			}
		});
	}

	/**
	 * Limpia o actualiza la lista de tendencias.
	 */
	public void initListaTendencias() {
		// los botones deben estar deshabilitados hasta
		// que se haya seleccionado una tendencia
		BotonEditar.setEnabled(false);
		BotonEliminar.setEnabled(false);
		
		// limpiar
		if( ! SeleccionTendencia.removeAllItems() ) {
			Notification.show("Error en VNuevaTendencia.initListaTendencias");
		}
		
		// actualizar
		// primero se revisa si hay algun plebiscito seleccionado
		if( !(SeleccionPlebiscito.getValue() == null) ){
			if( !SeleccionPlebiscito.getValue().toString().isEmpty() ) {
				// adquirir lista de tendencias del plebiscito seleccionado
				String nom_plebiscito = SeleccionPlebiscito.getValue().toString();
				int idp = controlador.getControladorBD().RecuperarIdPlebiscito(nom_plebiscito);
				List<String> lista_tendencias = controlador.getControladorBD().RecuperarListaTendencias(idp);
				if( lista_tendencias.isEmpty() ) {
					SeleccionTendencia.setCaption("No hay tendencias disponibles para el plebiscito seleccionado");
				}
				else {
					SeleccionTendencia.setCaption("O seleccione una tendencia ya registrada y presioner \"Editar\" o \"Eliminar\"");
					for(String nom_tendencia : lista_tendencias) {
						SeleccionTendencia.addItem(nom_tendencia);
					}
				}
			}
		}		
	}
	
	public void llenarListaPlebiscitos(List<String> lista_nombres) {
		// esta lista debe estar desactivada 
		// hasta que se seleccione algun plebiscito
		SeleccionTendencia.setEnabled(false);
		// el boton de nueva tendencia
		// tambien de estarlo
		BotonNueva.setEnabled(false);
		
		// tratar de borrar los plebiscitos que tuviera antes
		if (! this.SeleccionPlebiscito.removeAllItems() ) {
			Notification.show("Error en VNuevaTendencia.llenarListaPlebiscitos");
		}
		
		if( lista_nombres.isEmpty() ) {
			SeleccionPlebiscito.setCaption("No hay plebiscitos disponibles");	
		}
		else {
			SeleccionPlebiscito.setCaption("Seleccione el plebiscito al  cual pertenece la tendencia que va a crear o que va a modificar");
			
			for(String nombre_plebiscito : lista_nombres) {
				SeleccionPlebiscito.addItem(nombre_plebiscito);				
			}
		}		
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout
				.setCaption("Presione \"Nueva\" para crear nueva tendencia para el plebiscito seleccionado");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("380px");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("380px");
		
		// SeleccionPlebiscito
		SeleccionPlebiscito = new ComboBox();
		SeleccionPlebiscito
				.setCaption("Elija el plebiscito al  cual pertenece la tendencia que va a crear o que va a modificar");
		SeleccionPlebiscito.setImmediate(false);
		SeleccionPlebiscito.setWidth("460px");
		SeleccionPlebiscito.setHeight("-1px");
		mainLayout
				.addComponent(SeleccionPlebiscito, "top:116.0px;left:20.0px;");
		
		// Menu
		Menu = buildMenu();
		mainLayout.addComponent(Menu, "top:20.0px;left:20.0px;");
		
		// BotonNueva
		BotonNueva = new Button();
		BotonNueva.setCaption("Nueva");
		BotonNueva.setImmediate(true);
		BotonNueva.setWidth("-1px");
		BotonNueva.setHeight("-1px");
		mainLayout.addComponent(BotonNueva, "top:180.0px;left:20.0px;");
		
		// EtiquetaCrearNueva
		EtiquetaCrearNueva = new Label();
		EtiquetaCrearNueva.setImmediate(false);
		EtiquetaCrearNueva.setWidth("-1px");
		EtiquetaCrearNueva.setHeight("-1px");
		EtiquetaCrearNueva
				.setValue("Presione \"Nueva\" para crear nueva tendencia para el plebiscito seleccionado");
		mainLayout.addComponent(EtiquetaCrearNueva, "top:162.0px;left:20.0px;");
		
		// SeleccionTendencia
		SeleccionTendencia = new ComboBox();
		SeleccionTendencia
				.setCaption("O seleccione una tendencia ya registrada y presioner \"Editar\" o \"Eliminar\"");
		SeleccionTendencia.setImmediate(false);
		SeleccionTendencia.setWidth("-1px");
		SeleccionTendencia.setHeight("-1px");
		mainLayout.addComponent(SeleccionTendencia, "top:240.0px;left:20.0px;");
		
		// BotonEditar
		BotonEditar = new Button();
		BotonEditar.setCaption("Editar");
		BotonEditar.setImmediate(true);
		BotonEditar.setWidth("-1px");
		BotonEditar.setHeight("-1px");
		mainLayout.addComponent(BotonEditar, "top:280.0px;left:20.0px;");
		
		// BotonEliminar
		BotonEliminar = new Button();
		BotonEliminar.setCaption("Eliminar");
		BotonEliminar.setImmediate(true);
		BotonEliminar.setWidth("-1px");
		BotonEliminar.setHeight("-1px");
		mainLayout.addComponent(BotonEliminar, "top:280.0px;left:140.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildMenu() {
		// common part: create layout
		Menu = new Panel();
		Menu.setImmediate(false);
		Menu.setWidth("100px");
		Menu.setHeight("30px");
		
		// MenuContenido
		MenuContenido = new HorizontalLayout();
		MenuContenido.setImmediate(false);
		MenuContenido.setWidth("100.0%");
		MenuContenido.setHeight("100.0%");
		MenuContenido.setMargin(false);
		Menu.setContent(MenuContenido);
		
		return Menu;
	}
}
