package com.inge.edecisiones;

import java.util.ArrayList;
import java.util.List;

import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.ChartOptions;
import com.vaadin.addon.charts.model.ChartType;
import com.vaadin.addon.charts.model.Configuration;
import com.vaadin.addon.charts.model.DataSeries;
import com.vaadin.addon.charts.model.DataSeriesItem;
import com.vaadin.addon.charts.model.PlotOptionsPie;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ErrorMessage;
import com.vaadin.server.Resource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.TabSheet.Tab;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;

public class VVerResultados extends CustomComponent implements View{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet tbs_Opciones;
	@AutoGenerated
	private Panel panel_Menu;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	private VerResultados controlador;
	
	//
	private Chart est_generales;
	private Chart est_genero;
	private Chart est_lugar;
	private HorizontalLayout hl_generales;
	private HorizontalLayout hl_genero;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public VVerResultados(final VerResultados controlador) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.controlador = controlador;
		
		panel_Menu.setContent(new Menu(controlador.getEdecisiones()));
		panel_Menu.setSizeUndefined();
		
		mainLayout.setSizeUndefined();
		
		tbs_Opciones.setWidth(mainLayout.getWidth(),mainLayout.getWidthUnits());
		
		//se inicializan los charts que se necesitan
		//chart para estadisticas generales
		
		//chart para estadisticas por genero
		
		
		//chart para estadisticas por lugar
		/*est_lugar = new Chart(ChartType.PIE);
		est_lugar.setCaption("Lugar");
		est_lugar.setWidth("400px");  // 100% by default
		est_lugar.setHeight("300px"); // 400px by default
		conf = est_lugar.getConfiguration();
		conf.setTitle("Estadísticas por Lugar");
		//Configuracion del grafico circular
		options = new PlotOptionsPie();
		//options.setInnerSize(0); // 0 = circular
		options.setSize("75%");  
		options.setCenter("50%", "50%"); 
		conf.setPlotOptions(options);*/
		hl_generales = new HorizontalLayout();
		hl_genero = new HorizontalLayout();
		//hl_generales.setCaption("Generales");
		
		//chart.setSizeUndefined();
		tbs_Opciones.addTab(hl_generales).setCaption("Generales");
		tbs_Opciones.addTab(hl_genero).setCaption("Genero");
		//tbs_Opciones.addTab(est_lugar);
		
		Button btn_Volver = new Button("Volver");
		btn_Volver.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				controlador.volver();
			}
		});
		
		mainLayout.addComponent(btn_Volver);
	}

	public void graficarGeneral(List<String> estadisticas){
		est_generales = new Chart(ChartType.PIE);
		est_generales.setCaption("Generales");
		est_generales.setWidth("400px");  // 100% by default
		est_generales.setHeight("300px"); // 400px by default
		Configuration conf = est_generales.getConfiguration();
		conf.setTitle("Estadísticas Generales");
		//Configuracion del grafico circular
		PlotOptionsPie options = new PlotOptionsPie();
		options.setInnerSize(0); // 0 = circular
		options.setSize("75%");  
		options.setCenter("50%", "50%"); 
		conf.setPlotOptions(options);
		
		DataSeries series = new DataSeries();
		series.setName("Votos");
		
		for(String s : estadisticas){
			int indice = s.indexOf(" ");
			DataSeriesItem si = new DataSeriesItem(s.substring(indice+1), 
					                               Integer.parseInt(s.substring(0,indice)));
			si.setSliced(false);
			if(estadisticas.indexOf(s)==0){
				si.setSliced(true);
			}
			series.add(si);
		}
		
		conf.addSeries(series);
		
		List<String> datos = controlador.getDatos();
		
		hl_generales.removeAllComponents();
		VerticalLayout vl_generales = new VerticalLayout();
		vl_generales.setSpacing(true);
		vl_generales.addComponent(new Label("Estadísticas:"));
		vl_generales.addComponent(new Label("Votantes en total: "+datos.get(0)));
		vl_generales.addComponent(new Label("Han votado: "+datos.get(1)));
		vl_generales.addComponent(new Label("Faltan por votar: "+datos.get(2)));DateField di = new DateField("Inicio votación: ",
				controlador.getEdecisiones().getPlebiscito().GetInfoPlebiscito().GetPeriodoVotacion()[0]);
		di.setReadOnly(true);
		DateField df = new DateField("Inicio votación: ",
				controlador.getEdecisiones().getPlebiscito().GetInfoPlebiscito().GetPeriodoVotacion()[1]);
		df.setReadOnly(true);
		vl_generales.addComponent(di);
		vl_generales.addComponent(df);
		
		hl_generales.addComponent(est_generales);
		hl_generales.addComponent(vl_generales);
		//tbs_Opciones.setSelectedTab(est_generales);
	}
	
	public void graficarGenero(List<String> estadisticas){
		est_genero = new Chart(ChartType.PIE);
		est_genero.setCaption("Genero");
		est_genero.setWidth("400px");  // 100% by default
		est_genero.setHeight("300px"); // 400px by default
		Configuration conf = est_genero.getConfiguration();
		conf = est_genero.getConfiguration();
		conf.setTitle("Estadísticas por Genero");
		//Configuracion del grafico circular
		PlotOptionsPie options = new PlotOptionsPie();
		//options.setInnerSize(0); // 0 = circular
		options.setSize("75%");  
		options.setCenter("50%", "50%"); 
		conf.setPlotOptions(options);
		
		//recuperar y setear las estadisticas generales -> inner Pie
		List<String> general = controlador.getGenerales();
		DataSeries innerSeries = new DataSeries();
		innerSeries.setName("Votos");
		PlotOptionsPie innerOptions = new PlotOptionsPie();
		innerOptions.setSize("60%");
		innerSeries.setPlotOptions(innerOptions);
		
		for(String s : general){
			int indice = s.indexOf(" ");
			DataSeriesItem si = new DataSeriesItem(s.substring(indice+1), 
					                               Integer.parseInt(s.substring(0,indice)));
			si.setSliced(false);
			innerSeries.add(si);
		}
		
		//parsear las estadisticas y utilizarlas -> outer Pie
		DataSeries outerSeries = new DataSeries();
		outerSeries.setName("Genero");
		PlotOptionsPie outerOptions = new PlotOptionsPie();
		outerOptions.setInnerSize("60%");
		outerSeries.setPlotOptions(outerOptions);
		
		for(String s : estadisticas){
			int indice = s.indexOf(" ");
			DataSeriesItem di = new DataSeriesItem();
			di.setY(Integer.parseInt(s.substring(0, indice)));
			if(s.substring(indice+1).equalsIgnoreCase("0")){
				di.setName("Masculino");
			}
			else{
				di.setName("Femenino");
			}
			outerSeries.add(di);
		}
		
		conf.addSeries(innerSeries);
		conf.addSeries(outerSeries);
		
		List<String> datos = controlador.getDatos();
		
		VerticalLayout vl_generales = new VerticalLayout();
		vl_generales.setSpacing(true);
		vl_generales.addComponent(new Label("Estadísticas:"));
		vl_generales.addComponent(new Label("Votantes en total: "+datos.get(0)));
		vl_generales.addComponent(new Label("Han votado: "+datos.get(1)));
		vl_generales.addComponent(new Label("Faltan por votar: "+datos.get(2)));
		DateField di = new DateField("Inicio votación: ",
				controlador.getEdecisiones().getPlebiscito().GetInfoPlebiscito().GetPeriodoVotacion()[0]);
		di.setReadOnly(true);
		DateField df = new DateField("Inicio votación: ",
				controlador.getEdecisiones().getPlebiscito().GetInfoPlebiscito().GetPeriodoVotacion()[1]);
		df.setReadOnly(true);
		vl_generales.addComponent(di);
		vl_generales.addComponent(df);
		
		hl_genero.removeAllComponents();
		hl_genero.addComponent(est_genero);
		hl_genero.addComponent(vl_generales);
		//poner a genero como seleccionada
		//tbs_Opciones.setSelectedTab(est_genero);
	}
	
	private void graficarLugar(){
		//basarse en el graficarGenero
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// panel_Menu
		panel_Menu = buildPanel_Menu();
		mainLayout.addComponent(panel_Menu);
		mainLayout.setComponentAlignment(panel_Menu, new Alignment(33));
		
		// tbs_Opciones
		tbs_Opciones = new TabSheet();
		tbs_Opciones.setImmediate(false);
		tbs_Opciones.setWidth("-1px");
		tbs_Opciones.setHeight("-1px");
		mainLayout.addComponent(tbs_Opciones);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_Menu() {
		// common part: create layout
		panel_Menu = new Panel();
		panel_Menu.setImmediate(false);
		panel_Menu.setWidth("100px");
		panel_Menu.setHeight("30px");
		
		// verticalLayout_2
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		panel_Menu.setContent(verticalLayout_2);
		
		return panel_Menu;
	}

	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

}
