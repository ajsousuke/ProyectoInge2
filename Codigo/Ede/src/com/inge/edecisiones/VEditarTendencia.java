package com.inge.edecisiones;

import java.util.ArrayList;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.StreamResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Image;
import com.vaadin.ui.Label;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class VEditarTendencia extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private Panel PanelImagen;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private Panel Menu;

	@AutoGenerated
	private VerticalLayout verticalLayout_1;

	@AutoGenerated
	private Button BotonRegistrar;

	@AutoGenerated
	private Button BotonVolver;

	@AutoGenerated
	private TextArea EntradaContacto;

	@AutoGenerated
	private Button BotonEliminarLink;

	@AutoGenerated
	private ListSelect ListaLinks;

	@AutoGenerated
	private Button BotonAgregarLink;

	@AutoGenerated
	private TextField EntradaLink;

	@AutoGenerated
	private Upload SubidaFoto;

	@AutoGenerated
	private TextArea EntradaDescripcion;

	@AutoGenerated
	private TextField EntradaNombre;

	@AutoGenerated
	private Label EtiquetaCamposObligatorios;

	/** */
	private static final long serialVersionUID = 1L;
	
	/**- Atributos especificos -*/
	protected EditarTendencia controlador;
	private Image imagen;
	protected Tendencia tendencia;
	
	Window VentanaExito;
	Button BotonExito;
	
	Window VentanaConfirmar;
	Button BotonConfirmarOk;
	Button BotonConfirmarVolver;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public VEditarTendencia(EditarTendencia e) {
		controlador = e;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		Menu.setContent(  new Menu(controlador.getEdecisiones())  );
		Menu.setSizeUndefined();
		
		// inicializar otros componentes
		initPanelImagen();
		initBotones();
		initVentanas();
	}
	
	/**
	 * limpiar los contenidos de la ventana
	 */
	public void limpiar() {
		// poner deshabilitado este boton pues
		// se va a entrar a la ventana, y no hay
		// link seleccionado
		BotonEliminarLink.setEnabled(false);
		// aun no hay imagen
		imagen.setVisible(false);
		
		EntradaContacto.setValue("");
		EntradaDescripcion.setValue("");
		EntradaNombre.setValue("");
		EntradaLink.setValue("");
		
		ListaLinks.removeAllItems();
	}
	
	/**
	 * Llenar la ventana con datos de la tendencia ya existene 
	 */
	public void llenar() {
		// poner deshabilitado este boton pues
		// se va a entrar a la ventana, y no hay
		// link seleccionado
		BotonEliminarLink.setEnabled(false);
		// en caso de que no haya imagen
		imagen.setVisible(false);
		
		//		EntradaContacto;
		EntradaContacto.setValue(tendencia.GetInfoContacto());

		//		ListaLinks;
		ListaLinks.removeAllItems();
		List<String> links = tendencia.GetLinksExternos();
		if( !links.isEmpty() ) {
			for(String link : links) {
				ListaLinks.addItem(link);
			}
		}
		
		//		EntradaLink;
		EntradaLink.setValue("");		
		
		//		EntradaDescripcion;
		EntradaDescripcion.setValue(tendencia.GetDescripcion());
		
		//		EntradaNombre;
		EntradaNombre.setValue(tendencia.GetNombre());		
			
	}
	
	public void mostrarImagen(StreamResource recurso_imagen) {		
		imagen.setVisible(true);			
		imagen.setSource(recurso_imagen);
		PanelImagen.setSizeFull();
	}
	
	/**
	 * componente tendicia del cual
	 * leer o escribir datos
	 */
	public void setTendencia(Tendencia t) {
		this.tendencia = t;
	}
	
	/**
	 * revisa si hay algun campo
	 * obligatorio vacio
	 */
	public boolean tieneCamposVacios() {
		boolean algunvacio = false;
		
		algunvacio = EntradaContacto.getValue().isEmpty();
		algunvacio = ( algunvacio | EntradaDescripcion.getValue().isEmpty()  );
		algunvacio = ( algunvacio | EntradaNombre.getValue().isEmpty()  );
		
		return algunvacio;
	}
	
	/**
	 * guarda en el componente tendencia
	 * los valores en los campos de las ventanas
	 */
	public void leerDatos() {
		tendencia.SetNombre(EntradaNombre.getValue());
		tendencia.SetDescripcion(EntradaDescripcion.getValue());
		tendencia.SetInfoContacto(EntradaContacto.getValue());
		
		// leer lista de links
		ArrayList<String> listalinks = new ArrayList<String>();
		ArrayList<Object> itemIds = new ArrayList<Object>( ListaLinks.getItemIds() );
		if(itemIds != null) {
			if( !itemIds.isEmpty() ) {
				for(Object itemid: itemIds) {
					listalinks.add(itemid.toString());
				}
			}
		}
		tendencia.SetLinksExternos(listalinks);		
		// leer imagen: fue hecho al subir la imagen
		// o bien cuando se recupero la tendencia de la BD.		
	}
	
	/**
	 * inicializa las ventanas
	 */
	public void initVentanas() {
		// ventana de confirmacion
		VentanaConfirmar = new Window("Confirmar Registro");	
			
		BotonConfirmarOk = new Button("Confirmar");		
		BotonConfirmarOk.addClickListener(new Button.ClickListener() {	
			
			@Override
			public void buttonClick(ClickEvent event) {
				// guarda y pone la ventana de exito
				controlador.getEdecisiones().removeWindow(VentanaConfirmar);
				controlador.guardar();				
				controlador.getEdecisiones().addWindow(VentanaExito);
			}
		});	
		
		BotonConfirmarVolver = new Button("Volver");
		BotonConfirmarVolver.addClickListener(new Button.ClickListener() {	
			
			@Override
			public void buttonClick(ClickEvent event) {
				// solo quita la ventana de confirmacion
				controlador.getEdecisiones().removeWindow(VentanaConfirmar);
			}
		});	
		
		VerticalLayout contenido = new VerticalLayout();
		contenido.addComponent(new Label("El tendencia será registrada. Si se modificó una existente se guardaran los cambios."));
		contenido.addComponent(BotonConfirmarOk);
		contenido.addComponent(BotonConfirmarVolver);
		contenido.setSizeUndefined();
			
		VentanaConfirmar.setContent(contenido);
		VentanaConfirmar.setSizeUndefined();
		
		// ventana de exito
		VentanaExito = new Window("Registro Guardado");
				
		BotonExito = new Button("Exito");
		BotonExito.addClickListener(new Button.ClickListener() {	
			
			@Override
			public void buttonClick(ClickEvent event) {
				// quita la ventana de exito y vuelve a entrar a CUS editar plebiscito
				controlador.getEdecisiones().removeWindow(VentanaExito);
				controlador.ir_a_inicio();
			}
		});	
			
		contenido = new VerticalLayout();
		contenido.addComponent(new Label("Los datos se han guardado con éxito"));
		contenido.addComponent(BotonExito);
		
		VentanaExito.setContent(contenido);
		VentanaExito.setSizeUndefined();
	}
	
	/**
	 * inicializa los listeners de
	 * los botones
	 */
	private void initBotones() {
		// boton de volver
		BotonVolver.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				controlador.ir_a_inicio();
			}
		});		
		
		// boton de registrar
		BotonRegistrar.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				// verificacion sencilla:
				if( tieneCamposVacios() ) {
					Notification.show("Error: hay campos obligatorios vacios");
					return;
				}

				// guarde los datos en el objeto tendencia 
				leerDatos();
				if ( !controlador.datosValidos() ) {
					return;
				}				
				controlador.getEdecisiones().addWindow(VentanaConfirmar);
			}
		});
		
		// boton de  registrar link
		BotonAgregarLink.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				String nuevoLink = EntradaLink.getValue();
				if( !nuevoLink.isEmpty() ) {
					if(ListaLinks.containsId(nuevoLink)) {
						Notification.show("Error: Ya existe un link igual a este");
					}
					else {
						ListaLinks.addItem(nuevoLink);
					}
				}
				else {
					Notification.show("Error: El link suministrado esta vacio");
				}
			}
		});
		
		// boton de eliminar link
		BotonEliminarLink.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				// quita el seleccionado de la lista
				ListaLinks.removeItem( ListaLinks.getValue() );
			}
		});
		
		// lista de links
		ListaLinks.setImmediate(true);
		ListaLinks.addValueChangeListener( new ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				if( ListaLinks.getValue() == null) {
					BotonEliminarLink.setEnabled(false);
				}
				else {
					if( ListaLinks.getValue().toString().isEmpty()) {
						BotonEliminarLink.setEnabled(false);
					}
					else {
						BotonEliminarLink.setEnabled(true);
					}
				}
			}
		});
		
		// campo upload
		SubidaFoto.setButtonCaption("Subir Imagen");
		SubidaFoto.setReceiver(controlador);
		SubidaFoto.addSucceededListener(controlador);
	}

	/**
	 * inicializar el panel que
	 * contendra la imagen subida
	 */
	public void initPanelImagen() {
		
		imagen = new Image("Imagen subida");
		imagen.setVisible(false);
		
		// crear el contenido del panel
		VerticalLayout contenidoPanelImagen = new VerticalLayout();
		contenidoPanelImagen.addComponent(imagen);
		contenidoPanelImagen.setSizeUndefined();
		
		// asignar contenido al panel
		PanelImagen.setContent(contenidoPanelImagen);
		PanelImagen.setSizeUndefined();
	}

	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setCaption("Nombre de la tendencia / candidato (*)");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("856px");
		mainLayout.setHeight("1000px");
		
		// top-level component properties
		setWidth("856px");
		setHeight("1000px");
		
		// EtiquetaCamposObligatorios
		EtiquetaCamposObligatorios = new Label();
		EtiquetaCamposObligatorios.setImmediate(false);
		EtiquetaCamposObligatorios.setWidth("-1px");
		EtiquetaCamposObligatorios.setHeight("-1px");
		EtiquetaCamposObligatorios
				.setValue("Los campos con (*) son obligatorios");
		mainLayout.addComponent(EtiquetaCamposObligatorios,
				"top:112.0px;left:20.0px;");
		
		// EntradaNombre
		EntradaNombre = new TextField();
		EntradaNombre.setCaption("Nombre de la tendencia / candidato (*)");
		EntradaNombre.setImmediate(false);
		EntradaNombre.setWidth("440px");
		EntradaNombre.setHeight("-1px");
		mainLayout.addComponent(EntradaNombre, "top:146.0px;left:20.0px;");
		
		// EntradaDescripcion
		EntradaDescripcion = new TextArea();
		EntradaDescripcion
				.setCaption("Descripción de la tendencia /  canditato (*)");
		EntradaDescripcion.setImmediate(false);
		EntradaDescripcion.setWidth("440px");
		EntradaDescripcion.setHeight("-1px");
		mainLayout.addComponent(EntradaDescripcion, "top:190.0px;left:20.0px;");
		
		// SubidaFoto
		SubidaFoto = new Upload();
		SubidaFoto
				.setCaption("Suba una fotografía de la tendencia / del candidato");
		SubidaFoto.setImmediate(false);
		SubidaFoto.setWidth("440px");
		SubidaFoto.setHeight("-1px");
		mainLayout.addComponent(SubidaFoto, "top:324.0px;left:18.0px;");
		
		// EntradaLink
		EntradaLink = new TextField();
		EntradaLink.setCaption("Agregar Link externo");
		EntradaLink.setImmediate(false);
		EntradaLink.setWidth("340px");
		EntradaLink.setHeight("-1px");
		mainLayout.addComponent(EntradaLink, "top:380.0px;left:19.0px;");
		
		// BotonAgregarLink
		BotonAgregarLink = new Button();
		BotonAgregarLink.setCaption("Agregar");
		BotonAgregarLink.setImmediate(true);
		BotonAgregarLink.setWidth("-1px");
		BotonAgregarLink.setHeight("-1px");
		mainLayout.addComponent(BotonAgregarLink, "top:378.0px;left:380.0px;");
		
		// ListaLinks
		ListaLinks = new ListSelect();
		ListaLinks
				.setCaption("Lista de links agregados. Seleccione uno para eliminarlo");
		ListaLinks.setImmediate(false);
		ListaLinks.setWidth("440px");
		ListaLinks.setHeight("164px");
		mainLayout.addComponent(ListaLinks, "top:418.0px;left:18.0px;");
		
		// BotonEliminarLink
		BotonEliminarLink = new Button();
		BotonEliminarLink.setCaption("Eliminar Link");
		BotonEliminarLink.setImmediate(true);
		BotonEliminarLink.setWidth("-1px");
		BotonEliminarLink.setHeight("-1px");
		mainLayout.addComponent(BotonEliminarLink, "top:585.0px;left:19.0px;");
		
		// EntradaContacto
		EntradaContacto = new TextArea();
		EntradaContacto.setCaption("Información de contacto (*)");
		EntradaContacto.setImmediate(false);
		EntradaContacto.setWidth("440px");
		EntradaContacto.setHeight("122px");
		mainLayout.addComponent(EntradaContacto, "top:643.0px;left:19.0px;");
		
		// BotonVolver
		BotonVolver = new Button();
		BotonVolver.setCaption("Volver");
		BotonVolver.setImmediate(true);
		BotonVolver.setWidth("-1px");
		BotonVolver.setHeight("-1px");
		mainLayout.addComponent(BotonVolver, "top:777.0px;left:19.0px;");
		
		// BotonRegistrar
		BotonRegistrar = new Button();
		BotonRegistrar.setCaption("Registrar");
		BotonRegistrar.setImmediate(true);
		BotonRegistrar.setWidth("-1px");
		BotonRegistrar.setHeight("-1px");
		mainLayout.addComponent(BotonRegistrar, "top:777.0px;left:380.0px;");
		
		// Menu
		Menu = buildMenu();
		mainLayout.addComponent(Menu, "top:20.0px;left:18.0px;");
		
		// PanelImagen
		PanelImagen = buildPanelImagen();
		mainLayout.addComponent(PanelImagen, "top:815.0px;left:20.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildMenu() {
		// common part: create layout
		Menu = new Panel();
		Menu.setImmediate(false);
		Menu.setWidth("100px");
		Menu.setHeight("30px");
		
		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);
		Menu.setContent(verticalLayout_1);
		
		return Menu;
	}

	@AutoGenerated
	private Panel buildPanelImagen() {
		// common part: create layout
		PanelImagen = new Panel();
		PanelImagen.setImmediate(false);
		PanelImagen.setWidth("100px");
		PanelImagen.setHeight("30px");
		
		// verticalLayout_2
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		PanelImagen.setContent(verticalLayout_2);
		
		return PanelImagen;
	}

}
