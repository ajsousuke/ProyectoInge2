package com.inge.edecisiones;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;

public class VNuevoPlebiscito extends Panel implements View {	

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Button BotonEliminar;
	@AutoGenerated
	private Panel menu;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private ComboBox ComboBoxSeleccionar;
	@AutoGenerated
	private Button BotonEditar;
	@AutoGenerated
	private Button BotonNuevo;
	@AutoGenerated
	private Label EtiquetaNuevo;
	/**
	 * Para que no moleste mas
	 */
	private static final long serialVersionUID = 1L;
	
	/**- Atributos especificos -*/
	private EditarPlebiscito controlador;
	private InfoPlebiscito datos;	
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public VNuevoPlebiscito(EditarPlebiscito con) {
		controlador = con;
		
		buildMainLayout();

		// TODO add user code here		
		initBotones();
	}
	
	/**
	 * asignar listeners a los botones
	 */
	private void initBotones() {
		// boton nuevo
		BotonNuevo.addClickListener(new Button.ClickListener() {	
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				controlador.crearNuevo();
			}
		});
		
		//boton eliminar
		BotonEliminar.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				String nombrePlebiscito = ComboBoxSeleccionar.getValue().toString();
				controlador.eliminar(nombrePlebiscito);
			}
		});
		
		//boton editar
		BotonEditar.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				String nombrePlebiscito = ComboBoxSeleccionar.getValue().toString();
				controlador.editarExistente(nombrePlebiscito);
			}
		});
		
		// comboboxseleccionar
		ComboBoxSeleccionar.setImmediate(true);
		ComboBoxSeleccionar.addValueChangeListener( new Property.ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				if( ComboBoxSeleccionar.getValue() == null ) {
					BotonEditar.setEnabled(false);
					BotonEliminar.setEnabled(false);
				}
				else {
					if( ComboBoxSeleccionar.getValue().toString().isEmpty() ) {
						BotonEditar.setEnabled(false);
						BotonEliminar.setEnabled(false);
					}
					else {
						BotonEditar.setEnabled(true);
						BotonEliminar.setEnabled(true);
					}
				}
			}
		});
	}
	
	/**
	 * Llena el combobox con la lista de plebiscitos disponibles
	 * para editar o eliminar
	 * @param lista_nombres
	 */
	public void llenarListaPlebiscitos(List<String> lista_nombres) {

		// estos botones deben estar desactivados
		// hasta que se seleccione algun plebiscito
		BotonEditar.setEnabled(false);
		BotonEliminar.setEnabled(false);
		
		// tratar de borrar los plebiscitos que tuviera antes
		if (! ComboBoxSeleccionar.removeAllItems() ) {
			Notification.show("Error en VNuevoPblebiscito.llenarListaPlebiscitos");
		}
		
		if( lista_nombres.isEmpty() ) {
			ComboBoxSeleccionar.setCaption("No hay plebiscitos para editar");	
		}
		else {
			ComboBoxSeleccionar.setCaption("Seleccione un plesbicito ya registrado y presioner \"Editar\" para modificarlo. \"Eliminar\" para eliminarlo.");
			
			for(String nombre_plebiscito : lista_nombres) {
				ComboBoxSeleccionar.addItem(nombre_plebiscito);				
			}
		}		
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setCaption("Crear o Editar Plebiscito");
		mainLayout.setImmediate(false);
		
		// menu
		menu = new Panel();
		menu.setContent(new Menu(controlador.getEdecisiones()));
		mainLayout.addComponent(menu);
		
		// EtiquetaNuevo
		EtiquetaNuevo = new Label();
		EtiquetaNuevo.setImmediate(false);
		EtiquetaNuevo.setValue("Presione \"Nuevo\" para crear un nuevo plebiscito");
		mainLayout.addComponent(EtiquetaNuevo);
		
		// BotonNuevo
		BotonNuevo = new Button();
		BotonNuevo.setCaption("Nuevo");
		BotonNuevo.setImmediate(true);
		mainLayout.addComponent(BotonNuevo);
		
				
		// ComboBoxSeleccionar
		ComboBoxSeleccionar = new ComboBox();
		ComboBoxSeleccionar
				.setCaption("Seleccione un plesbicito ya registrado y presioner \"Editar\" para modificarlo. \"Eliminar\" para eliminarlo.");
		ComboBoxSeleccionar.setImmediate(false);
		mainLayout
				.addComponent(ComboBoxSeleccionar);
		
		// BotonEditar
		BotonEditar = new Button();
		BotonEditar.setCaption("Editar");
		BotonEditar.setImmediate(true);
		mainLayout.addComponent(BotonEditar);
		
				
		// BotonEliminar
		BotonEliminar = new Button();
		BotonEliminar.setCaption("Eliminar");
		BotonEliminar.setImmediate(true);
		mainLayout.addComponent(BotonEliminar);
		
		this.setContent(mainLayout);
		return mainLayout;
	}
}
